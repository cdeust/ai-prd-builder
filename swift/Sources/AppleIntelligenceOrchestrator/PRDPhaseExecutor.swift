import Foundation
import AIBridge

/// Executes the different phases of PRD generation
///
/// Prompt Engineering Techniques Used:
/// - **Pattern Completion**: Templates with minimal placeholders for consistent output
/// - **Token Optimization**: 60-70% reduction through compact syntax
/// - **Implicit Chain-of-Thought**: Arrow notation (â†’) guides reasoning without verbose instructions
/// - **Output Anchoring**: Direct structure specification reduces exploration
/// - **Self-Consistency**: Formula-based generation ensures uniform results
/// - **Few-Shot Learning**: Single example demonstrates all variations
/// - **Constraint Specification**: Variable legends define substitution rules
///
/// Expected Performance:
/// - Token reduction: ~60-70% across all prompts
/// - Faster inference through reduced processing
/// - More deterministic outputs via pattern-based generation
/// - Better error resilience with compact templates
public struct PRDPhaseExecutor {

    private let orchestrator: Orchestrator

    public init(orchestrator: Orchestrator) {
        self.orchestrator = orchestrator
    }

    // MARK: - Phase 1: Initial Overview

    public func executePhase1(input: String) async throws -> String {
        print(OrchestratorConstants.PRD.phase1)

        let prompt = String(format: PRDConstants.Phase1.template, input)
        let (response, _) = try await orchestrator.chat(
            message: prompt,
            useAppleIntelligence: true,
            thinkingMode: PRDConstants.DefaultValues.phase1ThinkingMode
        )

        return response
    }

    // MARK: - Phase 2: Feature Enrichment

    public func enrichFeature(_ featureName: String) async throws -> String {
        let prompt = String(format: PRDConstants.Phase2.template, featureName)
        let (response, _) = try await orchestrator.chat(
            message: prompt,
            useAppleIntelligence: true,
            thinkingMode: PRDConstants.DefaultValues.phase2ThinkingMode
        )

        return response
    }

    // MARK: - Phase 3: API Specifications

    /// Phase 3 uses advanced prompt engineering techniques:
    /// - Few-shot learning with complete examples
    /// - Template-based generation for consistency
    /// - Chunked processing to avoid context overflow
    /// - Pattern completion for structured output
    public func executePhase3API(context: String, useAdvancedGeneration: Bool = false) async throws -> String {
        // Split Phase 3 into smaller chunks to avoid context overflow
        if useAdvancedGeneration {
            // Use the OpenAPI validator for iterative generation and validation
            let validator = PRDOpenAPIValidator(orchestrator: orchestrator)
            print("ðŸŽ¯ Using advanced MCTS-based generation with formal verification...")
            return try await validator.generateWithMCTS(context: context, maxIterations: 30)
        } else {
            // Use chunked approach to stay within context limits
            return try await executePhase3InChunks(context: context)
        }
    }

    private func executePhase3InChunks(context: String) async throws -> String {
        // Generate complete OpenAPI spec in a single unified prompt
        // This avoids the fragmentation issues from multi-step generation
        return try await generateCompleteOpenAPISpec(context: context)
    }

    private func generateCompleteOpenAPISpec(context: String) async throws -> String {
        // Single prompt to generate complete, valid OpenAPI 3.1.0 spec
        // Avoids fragmentation and ensures all references are defined
        let prompt = """
        Generate OpenAPI 3.1.0 for: \(context)

        CRITICAL: Output ONLY a single YAML document. NO explanatory text before or after.

        Template (expand with actual entities from context):
        ```yaml
        openapi: 3.1.0
        info:
          title: [Extract main service name from context]
          version: 1.0.0
          description: [One sentence description]
        servers:
          - url: https://api.example.com/v1
            description: Production
        paths:
          /[resources]:
            get:
              summary: List [resources]
              operationId: list[Resources]
              responses:
                '200':
                  description: Success
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: '#/components/schemas/[Resource]'
                          total:
                            type: integer
            post:
              summary: Create [resource]
              operationId: create[Resource]
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/[Resource]Input'
              responses:
                '201':
                  description: Created
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/[Resource]'
          /[resources]/{id}:
            get:
              summary: Get [resource]
              operationId: get[Resource]
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
              responses:
                '200':
                  description: Success
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/[Resource]'
            put:
              summary: Update [resource]
              operationId: update[Resource]
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/[Resource]Input'
              responses:
                '200':
                  description: Updated
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/[Resource]'
            delete:
              summary: Delete [resource]
              operationId: delete[Resource]
              parameters:
                - name: id
                  in: path
                  required: true
                  schema:
                    type: string
              responses:
                '204':
                  description: Deleted
        components:
          schemas:
            [Resource]:
              type: object
              required: [id, name]
              properties:
                id:
                  type: string
                  format: uuid
                name:
                  type: string
                createdAt:
                  type: string
                  format: date-time
                updatedAt:
                  type: string
                  format: date-time
            [Resource]Input:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
            Error:
              type: object
              properties:
                message:
                  type: string
                code:
                  type: integer
          securitySchemes:
            BearerAuth:
              type: http
              scheme: bearer
        security:
          - BearerAuth: []
        ```

        Rules:
        1. Replace [Resource]/[resources] with actual entities from context
        2. All responses must use content/application/json/schema structure
        3. All $ref must point to defined schemas in components/schemas
        4. Output ONLY valid YAML, no markdown fence or extra text
        """

        let (response, _) = try await orchestrator.chat(
            message: prompt,
            useAppleIntelligence: true,
            thinkingMode: .systemsThinking
        )

        // Clean the response to ensure it's pure YAML
        return cleanOpenAPIResponse(response)
    }

    private func cleanOpenAPIResponse(_ response: String) -> String {
        var cleaned = response

        // Remove markdown code fences if present
        if cleaned.contains("```yaml") {
            cleaned = cleaned
                .replacingOccurrences(of: "```yaml\n", with: "")
                .replacingOccurrences(of: "\n```", with: "")
                .replacingOccurrences(of: "```", with: "")
        }

        // Remove any lines before 'openapi:'
        if let openapiRange = cleaned.range(of: "openapi:") {
            cleaned = String(cleaned[openapiRange.lowerBound...])
        }

        // Trim whitespace
        cleaned = cleaned.trimmingCharacters(in: .whitespacesAndNewlines)

        return cleaned
    }


    // MARK: - Phase 4: Test Specifications

    public func executePhase4Tests(features: [String]) async throws -> String {
        let featureList = features.joined(separator: "\n- ")
        let prompt = String(format: PRDConstants.Phase4.template, featureList)
        let (response, _) = try await orchestrator.chat(
            message: prompt,
            useAppleIntelligence: true,
            thinkingMode: PRDConstants.DefaultValues.phase4ThinkingMode
        )

        return response
    }

    // MARK: - Phase 5: Technical Requirements

    public func executePhase5Requirements(context: String) async throws -> String {
        let prompt = String(format: PRDConstants.Phase5.template, context)
        let (response, _) = try await orchestrator.chat(
            message: prompt,
            useAppleIntelligence: true,
            thinkingMode: PRDConstants.DefaultValues.phase5ThinkingMode
        )

        return response
    }

    // MARK: - Phase 6: Deployment Configuration

    public func executePhase6Deployment() async throws -> String {
        let (response, _) = try await orchestrator.chat(
            message: PRDConstants.Phase6.template,
            useAppleIntelligence: true,
            thinkingMode: PRDConstants.DefaultValues.phase6ThinkingMode
        )

        return response
    }
}